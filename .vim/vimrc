set encoding=utf-8
scriptencoding utf-8
set autoread
set background=dark
set backspace=indent
set belloff=backspace,cursor,error,showmatch,esc visualbell
set showbreak= breakindent breakindentopt=shift:2 cpoptions+=n
set ignorecase smartcase
set casemap=keepascii
set clipboard=unnamed,unnamedplus
set colorcolumn=+1
set completeopt=menu,menuone,preview
set cursorline
set diffopt=filler,vertical,closeoff
set display=lastline
set fileencodings=ucs-bom,utf-8,default,euc-jp,cp932
set fileformats=unix,dos
set fillchars=vert:│,fold:-
set guioptions=!Mr
set formatoptions+=mBj
set guicursor=a:blinkon0
set helplang=Ja,En
set history=1000
set smartindent autoindent
set keywordprg=:Man
set lispwords-=if
set list listchars=tab:»-,extends:»,precedes:«,nbsp:◦
set showmatch matchtime=1 matchpairs+=（:）,｛:｝,＜:＞,［:］,「:」,『:』,【:】
set modeline modelines=3
set mouse=a mousemodel=extend nomousehide
set number relativenumber
set pastetoggle=<F10>
set path+=include,arch/x86/include
set pumheight=10
set report=15
set scrolloff=3 sidescroll=1 sidescrolloff=10
set incsearch hlsearch nowrapscan
if has('win32') && !has('gui_win32')
	set shell=pwsh
endif
set shortmess=aoOtT
set splitbelow splitright
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.exe,.lock
set suffixesadd=.tex
set laststatus=2
fu! g:Statusline()
	return '%f%<%H'
		\ .. (&modified ? ' +' : '')
		\ .. (!&modifiable ? ' -' : '')
		\ .. (&readonly ? ' RO' : '')
		\ .. (&paste ? ' <paste>' : '')
		\ .. '%='
		\ .. (&bomb ? toupper(&fileencoding) .. '-BOM'
		\	: &fileencoding !=# 'utf-8' ? toupper(&fileencoding) : '')
		\ .. (&fileformat ==# 'unix' ? ''
		\	: &fileformat ==# 'dos' ? ' CRLF' : ' CR')
		\ .. ' %Y 0x%02.4B %5l,%3c-%-3v %P %LL'
		\ .. (wordcount().chars - line('$'))
		\ .. 'C'
endfu
set statusline=%{%Statusline()%}
set showtabline=2
fu! s:Tablabel(tabpagenr)
	let l:buflist = tabpagebuflist(a:tabpagenr)
	let l:curbufnr = l:buflist[tabpagewinnr(a:tabpagenr) - 1]
	let l:hi = a:tabpagenr ==# tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
	let l:no = len(l:buflist) ==# 1 ? '' : len(l:buflist)
	let l:mod = len(filter(copy(l:buflist), 'getbufvar(v:val, "&modified")')) ? '+' : ''
	let l:sp = (l:no .. l:mod) ==# '' ? '' : ' '
	let l:fname = fnamemodify(bufname(l:curbufnr), ':t')
	let l:fname = l:fname ==# '' ? '_' : l:fname
	return '%' .. a:tabpagenr .. 'T%#Title#' .. l:no .. l:hi .. l:mod .. l:sp .. l:fname .. '%#TabLineFill#'
endfu
fu! g:Cuitabline()
	let l:tablabels = join(map(range(1, tabpagenr('$')), '<SID>Tablabel(v:val)'), ' ')
	let l:info = strftime('%m/%d%a %H:%M') .. ' %#TabLine#%<' .. fnamemodify(getcwd(), ':~') .. ' '
	return l:tablabels .. ' %T%=' .. l:info
endfu
set tabline=%!g:Cuitabline()
set noexpandtab shiftwidth=0 tabstop=8
set tagcase=match tags=./tags;./../../,tags;../../
set ttimeoutlen=10
let $MYVIM = fnamemodify($MYVIMRC, ':h')
set viminfofile=$MYVIM/.viminfo directory=$MYVIM/swap
set virtualedit=block
set wildmenu wildignorecase wildmode=list:longest,full
set wrap
let g:c_comment_strings = 1
let g:c_gnu = 1
let g:c_syntax_for_h = 1
let g:is_bash = 1
let g:mapleader = ' '
let g:maplocalleader = ' '
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'cpp']
let g:ocaml_revised = 1
let g:python_highlight_all = 1
let g:readline_has_bash = 1
let g:rust_bang_comment_leader = 1
let g:tex_conceal = ''
let g:tex_flavor = 'latex'
let g:vim_indent_cont = &tabstop
let g:vim_json_conceal = 0
filetype plugin indent on
syntax enable

if &term ==# 'xterm' || has('win32')
	set t_Co=256
endif

let &t_TI = ""
let &t_TE = ""
if !exists('$SCREEN_TTY')
	call echoraw("\e[<0t\e[<s")
	let &t_SI ..= "\e[<r"
	let &t_EI ..= "\e[<s\e[<0t"
	let &t_te ..= "\e[<0t\e[<s"
	fu! g:Imzero()
		if s:autoIminsertZero
			call echoraw("\e[<0t\e[<s")
		endif
		return ''
	endfu
	fu! s:FontSizeSet(amount)
		call echoraw("\e]7770;" .. a:amount .. "\x7")
	endfu
	fu! s:SetScreenTitle()
	endfu
	fu! s:CopyToScreenReg(str)
	endfu
	fu! s:CopyToClip_OSC52(str)
		if a:str ==# ''
			return
		endif
		let l:escaped = shellescape(a:str)
		let l:enc = systemlist('echo -n ' .. l:escaped .. ' | base64 -w0')[0]
		call echoraw("\e]52;c;" .. l:enc .. "\x7")
	endfu
else
	set mouse=
	call echoraw("\eP\e[<0t\e[<s\e\\")
	let &t_SI ..= "\eP\e[<r\e\\"
	let &t_EI ..= "\eP\e[<s\e[<0t\e\\"
	let &t_te ..= "\eP\e[<0t\e[<s\e\\"
	let &t_BE = "\eP\e[?2004h\e\\"
	let &t_BD = "\eP\e[?2004l\e\\"
	let &t_PS = "\e[200~"
	let &t_PE = "\e[201~"
	fu! g:Imzero()
		if s:autoIminsertZero
			call echoraw("\eP\e[<0t\e[<s\e\\")
		endif
		return ''
	endfu
	fu! s:FontSizeSet(amount)
		call echoraw("\eP\e]7770;" .. a:amount .. "\x7\e\\")
	endfu
	fu! s:SetScreenTitle()
		call job_start(['screen', '-X', 'title', 'vim'])
	endfu
	fu! s:CopyToScreenReg(str)
		let l:escaped = escape(a:str, '\$^')
		if len(l:escaped) <= 749
			call job_start(['screen', '-X', 'register', '.', l:escaped])
		endif
	endfu
	fu! s:CopyToClip_OSC52(str)
		if a:str ==# ''
			return
		endif
		if exists('$SUDO_USER') && systemlist('stat -c %U ' .. $SCREEN_TTY)[0] !=# $SUDO_USER
			if !exists('b:sudo_clip_warned')
				echom 'Recreate new window for copy to work!'
				let b:sudo_clip_warned = 1
			endif
			return
		endif
		let l:escaped = shellescape(a:str)
		let l:enc = systemlist('echo -n ' .. l:escaped .. ' | base64 -w0')[0]
		if !filewritable($SCREEN_TTY) && exists('$STY')
			call s:UpdateScreenTTY()
		endif
		call writefile(["\e]52;c;" .. l:enc .. "\x7"], $SCREEN_TTY, 'b')
	endfu
	fu! s:UpdateScreenTTY()
		let $SCREEN_TTY = systemlist('screen -QX echo \$SCREEN_TTY 2>/dev/null')[0]
	endfu
	command! -nargs=0 UpdateScreenTTY call <SID>UpdateScreenTTY()
		" if len(l:enc) <= 504
		" 	call echoraw("\eP\e]52;c;" .. l:enc .. "\x7\e\\")
		" endif
endif
if !executable('base64')
	fu! s:CopyToClip_OSC52(str)
	endfu
endif
fu! s:FontSizeGet()
	call <SID>FontSizeSet('?')
	for l:_ in range(7)
		call getcharstr()
	endfor
	let l:size = ""
	while 1
		let l:char = getcharstr()
		if l:char ==# "\x7"
			break
		else
			let l:size ..= l:char
		endif
	endwhile
	echo l:size
endfu
let s:pythonexe = executable('python3') ? 'python3' : 'python'

" mapping
map Y y$

nnoremap <silent> mm <Cmd>noh<CR>

nnoremap <silent> <C-W><C-E> <Cmd>tabe<CR>
nnoremap <silent> <C-W><C-L> <Cmd>tabn<CR>
nnoremap <silent> <C-W><C-H> <Cmd>tabp<CR>
nnoremap <silent> <C-W><C-O> <Cmd>tabo<CR>
tnoremap <silent> <C-W><C-E> <Cmd>tabe<CR>
tnoremap <silent> <C-W><C-L> <Cmd>tabn<CR>
tnoremap <silent> <C-W><C-H> <Cmd>tabp<CR>
tnoremap <silent> <C-W><C-O> <Cmd>tabo<CR>

nnoremap <silent> <Leader>o o<Esc>

nnoremap Q gq
nnoremap <Leader>w <Cmd>w<CR>
nnoremap <Leader>n <Cmd>n<CR>
nnoremap <Leader>p <Cmd>N<CR>
nnoremap <Leader>c <Cmd>clo<CR>

nmap ysa' ys2i'
nmap ysa" ys2i"
nmap ysa` ys2i`

nnoremap <Esc>M <C-W>-
nnoremap <Esc>P <C-W>+

cnoremap <C-G> <C-\><C-N>
inoremap <C-G> <C-\><C-N>

nnoremap <silent> <Esc>= <Cmd>call <SID>FontSizeSet('')<CR>
nnoremap <silent> <Esc>+ <Cmd>call <SID>FontSizeSet('+1')<CR>
nnoremap <silent> <Esc>- <Cmd>call <SID>FontSizeSet('-1')<CR>

nnoremap g/ /\<\><Left><Left>

if has('win32')
	silent! vunmap <C-X>
endif

inoremap <C-U> <C-G>u<C-U>

cnoremap <Left> <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>
cnoremap <Up> <C-P>
cnoremap <Down> <C-N>
cnoremap <C-A> <Home>
" cnoremap <C-O>
" cnoremap <C-B>

fu! s:FixWhitespace(line1, line2)
	let l:save_cursor = getcurpos()
	silent! execute 'keeppatterns ' .. a:line1 .. ',' .. a:line2 .. 's/\\\@<!\s\+$//'
	call setpos('.', l:save_cursor)
endfu
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>, <line2>)
nnoremap <silent> <Leader>f <Cmd>FixWhitespace<CR>

command! -nargs=0 Cdhere tcd %:p:h
nnoremap <silent> <Leader>d <Cmd>Cdhere<CR>
fu! s:Cdcword()
	let l:cword = expand('<cWORD>')
	execute 'tcd ' .. l:cword
endfu
command! -nargs=0 Cdcword call <SID>Cdcword()
nnoremap <silent> <Leader>D <Cmd>Cdcword<CR>

fu! s:ResetSearchDirection(cmd)
	let @/=@/
	nunmap n
	nunmap N
	return a:cmd
endfu
fu! s:ConsistentSearch(cmd)
	nnoremap <expr> n <SID>ResetSearchDirection('n')
	nnoremap <expr> N <SID>ResetSearchDirection('N')
	return a:cmd
endfu
nnoremap <expr> ?  <SID>ConsistentSearch('?')
nnoremap <expr> #  <SID>ConsistentSearch('#')
nnoremap <expr> g# <SID>ConsistentSearch('g#')

fu! s:Search(zero)
	let l:cword = expand('<cword>')
	if a:zero ==# 0
		let l:pat = '\<' .. l:cword .. '\>'
	else
		let l:pat = l:cword
	endif
	call histadd('/', l:pat)
	let @/=l:pat
	call <SID>CopyToOther(l:cword)
	return "\"_yiw\<BS>\<C-\>\<C-N>n"
endfu
nnoremap <expr> *  <SID>Search(0)
nnoremap <expr> g* <SID>Search(1)

fu! g:RestoreRegister()
	silent! let @* = s:restore_reg
	silent! let @+ = s:restore_reg
	let @" = s:restore_reg
	return ''
endfu
fu! s:Repl()
	silent! let s:restore_reg = @*
	silent! let s:restore_reg = @+
	let s:restore_reg = @"
	return "p@=g:RestoreRegister()\<CR>"
endfu
vnoremap <silent> <expr> p <SID>Repl()

fu! s:Getfname()
	let l:fname = bufname() .. ':' .. getcurpos()[1]
	silent! let @* = l:fname
	silent! let @+ = l:fname
	call <SID>CopyToOther(l:fname)
	return l:fname
endfu
command! Getfname echo <SID>Getfname()
nnoremap <silent> yd <Cmd>Getfname<CR>

fu! s:RegexRubout(re)
	let l:right = strpart(getcmdline(), getcmdpos() - 1)
	let l:left = strpart(getcmdline(), 0, getcmdpos() - 1)
	let l:left = substitute(l:left, a:re, '', '')
	call setcmdpos(strlen(l:left) + 1)
	return l:left .. l:right
endfu
cnoremap <Esc>/     <C-\>e<SID>RegexRubout('\v[^/ ]*/? *$')<CR>
cnoremap <C-W>      <C-\>e<SID>RegexRubout('\v([a-zA-Z0-9]+\|[^ a-zA-Z0-9]+) *$')<CR>
cnoremap <Esc>h     <C-\>e<SID>RegexRubout('\v([a-zA-Z0-9]+\|[^ a-zA-Z0-9]+) *$')<CR>
cnoremap <Esc><C-W> <C-\>e<SID>RegexRubout('\v[^ ]* *$')<CR>

fu! s:StayColumn(cmd)
	let l:save_cursor = getcurpos()
	let l:save_cursor[4] = virtcol('.')
	call setpos('.', l:save_cursor)
	return a:cmd
endfu
nnoremap <silent> <expr> gj <SID>StayColumn(v:count1 .. 'gj')
nnoremap <silent> <expr> gk <SID>StayColumn(v:count1 .. 'gk')

fu! s:MultiHlSetup()
	hi Multihl1 ctermbg=14 ctermfg=8 guibg=#00ffff guifg=#808080
	hi Multihl2 ctermbg=13 ctermfg=8 guibg=#ff00ff guifg=#808080
	hi Multihl3 ctermbg=11 ctermfg=8 guibg=#ffff00 guifg=#808080
	hi Multihl4 ctermbg=1  ctermfg=7 guibg=#800000 guifg=#c0c0c0
	hi Multihl5 ctermbg=4  ctermfg=7 guibg=#000080 guifg=#c0c0c0
	hi Multihl6 ctermbg=2  ctermfg=7 guibg=#008000 guifg=#c0c0c0
endfu
fu! s:Hi(num, ...)
	if a:num ==# 0
		call clearmatches()
	else
		silent! call matchdelete(a:num + 5)
		if a:0 !=# 0
			call matchadd('Multihl' .. a:num, a:1, 10, a:num + 5)
			call histadd(':', 'Hi' .. a:num .. ' ' .. a:1)
			return
		endif
	endif
	call histadd(':', 'Hi' .. a:num)
endfu
command! -nargs=0 Hi0 call <SID>Hi(0)
command! -nargs=? Hi1 call <SID>Hi(1, <f-args>)
command! -nargs=? Hi2 call <SID>Hi(2, <f-args>)
command! -nargs=? Hi3 call <SID>Hi(3, <f-args>)
command! -nargs=? Hi4 call <SID>Hi(4, <f-args>)
command! -nargs=? Hi5 call <SID>Hi(5, <f-args>)
command! -nargs=? Hi6 call <SID>Hi(6, <f-args>)
nnoremap <Leader>0 :<C-U>Hi0<CR>
nnoremap <Leader>1 :<C-U>Hi1 <C-R><C-W><CR>
nnoremap <Leader>2 :<C-U>Hi2 <C-R><C-W><CR>
nnoremap <Leader>3 :<C-U>Hi3 <C-R><C-W><CR>
nnoremap <Leader>4 :<C-U>Hi4 <C-R><C-W><CR>
nnoremap <Leader>5 :<C-U>Hi5 <C-R><C-W><CR>
nnoremap <Leader>6 :<C-U>Hi6 <C-R><C-W><CR>

fu! s:TagfuncLinux(pattern, flags, info)
	if ! b:guesstag | let b:guesstag = 1 | return v:null | endif

	let l:cmdline = 0
	if a:flags ==# 'c'
		let l:pat = '^' .. a:pattern .. '$'
		let l:path = a:info['buf_ffname'][len(fnamemodify(tagfiles()[0], ':p:h')) + 1:]
	elseif a:flags ==# ''
		let l:pat = '^' .. a:pattern .. '$'
		let l:path = '<command line>'
		let l:cmdline = 1
	elseif a:flags ==# 'r'
		let l:pat = a:pattern
		let l:path = '<command line>'
		let l:cmdline = 1
	else " 'i'
		let l:pat = '^' .. a:pattern
		let l:path = a:info['buf_ffname'][len(fnamemodify(tagfiles()[0], ':p:h')) + 1:]
	endif
	echom 'tag: ' .. l:pat .. ' from ' .. l:path

	" Exclude prototypes
	let l:tags = filter(taglist(l:pat), 'get(v:val, ''kind'', '''') !=# ''p''')
	if len(l:tags) ==# 1 | echom '  Jump to the only' | return l:tags | endif

	" Limit to members or non-members
	let l:before = expand('<cexpr>')[:-1 - len(expand('<cword>'))]
	if l:before[-1:] ==# '.' || l:before[-2:] ==# '->'
		echom '  Only members'
		call filter(l:tags, 'get(v:val, ''kind'', '''') ==# ''m''')
	else
		echom '  Exclude members'
		call filter(l:tags, 'get(v:val, ''kind'', '''') !=# ''m''')
	endif
	if len(l:tags) ==# 1 | echom '  Jump to the only' | return l:tags | endif

	" Exclude unlikelies
	let l:exclude_path_list = ['tools', 'drivers', 'samples', 'scripts']
	if l:path[:5] ==# 'tools/'
		call remove(l:exclude_path_list, 0)
	elseif l:path[:7] ==# 'drivers/'
		call remove(l:exclude_path_list, 1)
	elseif l:path[:7] ==# 'samples/'
		call remove(l:exclude_path_list, 2)
	elseif l:path[:7] ==# 'scripts/'
		call remove(l:exclude_path_list, 3)
	endif
	let l:exclude_pat = join(l:exclude_path_list, '|')
	echom '  Exclude ' .. l:exclude_pat .. ' dir'
	call filter(l:tags, 'v:val[''filename''] !~# ''\v^(' .. l:exclude_pat .. ')/''')
	if len(l:tags) ==# 1 | echom '  Jump to the only' | return l:tags | endif

	" Guessing
	if l:cmdline | return l:tags | endif
	let l:current = filter(copy(l:tags), 'l:path ==# v:val[''filename'']')
	if len(l:current) ==# 1 | echom '  Jump to the only current' | return l:current | endif

	" Failed guessing, return likelies
	return l:tags
endfu
fu! s:SetTagfunc(guess)
	let b:guesstag = a:guess
	if fnamemodify(tagfiles()[0], ':p') =~# '/linux/'
		setl tagfunc=<SID>TagfuncLinux
	else
		setl tagfunc=
	endif
endfu
fu! s:Tjump(sp, guess)
	if len(tagfiles())
		call <SID>SetTagfunc(a:guess)
		return (a:sp ? "\<C-W>" : '') .. "g\<C-]>"
	else
		return ":ALEGoToDefinition" .. (a:sp ? ' -split' : '') .. "\<CR>"
	endif
endfu
nnoremap <expr> g<C-]>      <SID>Tjump(0, 0)
vnoremap <expr> g<C-]>      <SID>Tjump(0, 0)
nnoremap <expr> g]          <SID>Tjump(0, 0)
vnoremap <expr> g]          <SID>Tjump(0, 0)
nnoremap <expr> <C-]>       <SID>Tjump(0, 1)
vnoremap <expr> <C-]>       <SID>Tjump(0, 1)
nnoremap <expr> <C-W>g<C-]> <SID>Tjump(1, 0)
vnoremap <expr> <C-W>g<C-]> <SID>Tjump(1, 0)
nnoremap <expr> <C-W>g]     <SID>Tjump(1, 0)
vnoremap <expr> <C-W>g]     <SID>Tjump(1, 0)
nnoremap <expr> <C-W><C-]>  <SID>Tjump(1, 1)
vnoremap <expr> <C-W><C-]>  <SID>Tjump(1, 1)
nnoremap <expr> <C-W>]      <SID>Tjump(1, 1)
vnoremap <expr> <C-W>]      <SID>Tjump(1, 1)
command! -nargs=1 -bar Tj   call <SID>SetTagfunc(1) | tj  <args>
command! -nargs=1 -bar Stj  call <SID>SetTagfunc(1) | stj <args>
command! -nargs=1 -bar Gtj  call <SID>SetTagfunc(0) | tj  <args>
command! -nargs=1 -bar Gstj call <SID>SetTagfunc(0) | stj <args>

fu! s:Spacing(line1, line2)
	let l:a = '[[:graph:]]'
	let l:m = '[^ [:graph:][:cntrl:]]'
	let l:k = '[、。]'
	let l:s = 'keeppatterns ' .. a:line1 .. ',' .. a:line2 .. 's/\v'

	silent! execute l:s..'('..l:a..'+) +\ze'..l:a..'/\1 /g'
	silent! execute l:s..'('..l:a..'+) *\ze'..l:m..'/\1 /g'
	silent! execute l:s..'('..l:m..'+) *\ze'..l:a..'/\1 /g'

	silent! execute l:s..'('..l:m..'+) +\ze'..l:m..'/\1/g'
	silent! execute l:s..'('..l:a..'+) +\ze'..l:k..'/\1/g'
	silent! execute l:s..'('..l:k..'+) +\ze'..l:a..'/\1/g'

	silent! execute l:s..'('..l:m..'+) +\ze[)]/\1/g'
	silent! execute l:s..'([(]) +\ze('..l:m..'+)/\1/g'

	silent! execute l:s..' +$//g'
endfu
command! -range=% Spacing call <SID>Spacing(<line1>, <line2>)
nnoremap <silent> <Leader>s :call <SID>Spacing('.', '.')<CR>
vnoremap <silent> <Leader>s :call <SID>Spacing('''<', '''>')<CR>

fu! s:UnSpacing(line1, line2)
	let l:a = '[[:graph:]]'
	let l:m = '[^ [:graph:][:cntrl:]]'
	let l:s = 'keeppatterns ' .. a:line1 .. ',' .. a:line2 .. 's/\v'

	silent! execute l:s..'('..l:a..'+) +\ze'..l:a..'/\1 /g'

	silent! execute l:s..'('..l:a..'+) +\ze'..l:m..'/\1/g'
	silent! execute l:s..'('..l:m..'+) +\ze/\1/g'

	silent! execute l:s..' +$//g'
endfu
command! -range=% Unspacing call <SID>UnSpacing(<line1>, <line2>)
nnoremap <silent> <Leader>S :call <SID>UnSpacing('.', '.')<CR>
vnoremap <silent> <Leader>S :call <SID>UnSpacing('''<', '''>')<CR>

fu! s:CopyMode()
	if !exists('w:copymode')
		let w:copymode = 1
		setl nolist nonumber norelativenumber nobreakindent
	else
		unlet w:copymode
		setl list number relativenumber breakindent
	endif
endfu
nnoremap <silent> <Leader>v <Cmd>call <SID>CopyMode()<CR>

fu! g:SchemeIndentExpr(type = '') abort
	if a:type == ''
		set opfunc=g:SchemeIndentExpr
		return 'g@'
	endif
	'[,']normal! ==
endfu

" excommand
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

fu! s:ReadTypescript()
	let l:ts = map(readfile('typescript')[1:-3], {_, val -> substitute(val, '\s\+$', '', '')})
	if &ft ==# 'c'
		let l:ts = ['/*'] + l:ts + ['*/']
	endif
	call append(getpos('.')[1], l:ts)
endfu
command! Typesc call <SID>ReadTypescript()

command! Hitest runtime syntax/hitest.vim
command! Colortest runtime syntax/colortest.vim

fu! s:XXD(do)
	if a:do
		let b:save_ft_binary = [&filetype, &binary]
		let &binary = 1
		silent edit " for binary to take effect
		let &ft = 'xxd'
		%!xxd
	else
		if exists('b:save_ft_binary')
			let [&filetype, &binary] = b:save_ft_binary
			unlet b:save_ft_binary
		endif
		%!xxd -r
	endif
endfu
command! XXD call <SID>XXD(1)
command! XXDundo call <SID>XXD(0)

fu! s:Align(cmd, line1, line2, ...)
	let l:save_cursor = getcurpos()
	if a:0 ==# 0
		let l:char = input('')
	else
		let l:char = a:1
	endif
	execute 'normal ' .. a:line1 .. 'GV' .. a:line2 .. 'G' .. a:cmd .. l:char
	call setpos('.', l:save_cursor)
endfu
command! -range -nargs=? AlignRight call <SID>Align('gL', <line1>, <line2>, <f-args>)
command! -range -nargs=? AlignLeft  call <SID>Align('gl', <line1>, <line2>, <f-args>)

command! -nargs=0 Reload let s:undoreload = &undoreload | set undoreload=0 | edit | let &undoreload = s:undoreload

fu! s:Nkf()
	let l:fname = fnamemodify(expand('%'), ':p')
	if executable('uchardet')
		let l:enc = system('uchardet ' .. l:fname)
	elseif executable('nkf')
		let l:enc = system('nkf --guess=1 ' .. l:fname)
	else
		echoerr 'uchardet or nkf must be installed!'
		return
	endif
	execute 'e ++enc=' .. l:enc
endfu
command! -nargs=0 Nkf call <SID>Nkf()

fu! s:Command(env, reuse, focus, close, arg)
	let l:shiflag = has('win32') ? &shellcmdflag : '-ic'
	let l:cmd = &shell .. ' ' .. l:shiflag .. ' "' .. join(a:arg) .. '"'
	let l:opt = {'term_rows': &lines / 4, 'term_cols': &columns - 7, 'term_kill': 'term', 'env': a:env}
	if a:close
		let l:opt['term_finish'] = 'close'
	endif
	if a:reuse
		let l:n = bufnr('!' .. l:cmd)
		if l:n !=# -1
			execute 'bdelete ' .. l:n
		endif
	endif
	call term_start(l:cmd, l:opt)
	if !a:focus
		wincmd p
	endif
endfu
fu! s:BashComp(ArgLead, CmdLine, CursorPos)
	return g:bash#complete(substitute(strpart(a:CmdLine, 0, a:CursorPos), '^\s*\a\+ ', '', ''))
endfu
fu! s:GitComp(ArgLead, CmdLine, CursorPos)
	return g:bash#complete(substitute(strpart(a:CmdLine, 0, a:CursorPos), '^\s*\a\+ ', 'git ', ''))
endfu
if has('win32')
	command! -nargs=* -complete=file S call <SID>Command({}, 0, 0, 0, [<f-args>])
else
	command! -nargs=* -complete=customlist,<SID>BashComp S call <SID>Command({}, 0, 0, 0, [<f-args>])
	command! -nargs=* -complete=customlist,<SID>BashComp I call <SID>Command({}, 0, 1, 1, [<f-args>])
	command! -nargs=* -complete=customlist,<SID>GitComp Git call <SID>Command({'GIT_PAGER': ''}, 1, 1, 0, ['git', <f-args>])
	command! -nargs=* -complete=customlist,<SID>GitComp Gitpager call <SID>Command({}, 1, 1, 0, ['git', <f-args>])
endif

let s:template = {
	\ 'c'     : ['#include <stdio.h>', '', 'int main(void) {', '	printf("Hello\n");', '	return 0;', '}'],
	\ 'go'    : ['package main', '', 'import "fmt"', '', 'func main() {', '	fmt.Println("Hello")', '}'],
	\ 'perl'  : ['#!/usr/bin/perl', 'use strict;', 'use warnings;'],
	\ 'python': '#!/usr/bin/env ' .. s:pythonexe,
	\ 'sh'    : ['#!/usr/bin/bash', 'set -euxo pipefail'],
	\ }
let s:template_after = {
	\ 'c' : 'call cursor(4, 2)',
	\ 'go': 'call cursor(6, 2)',
	\ '_' : 'call cursor(line(''$''), 1)',
	\ }
fu! s:Template()
	if has_key(s:template, &filetype)
		call append(0, s:template[&filetype])
		if getline('$') ==# ''
			$delete _
		endif
		if has_key(s:template_after, &filetype)
			execute(s:template_after[&filetype])
		else
			execute(s:template_after['_'])
		endif
		echon ' Template loaded'
	endif
endfu
command! -nargs=0 Template call <SID>Template()

fu! s:Sort(pat)
	let l:save_reg = @a
	normal! gv"ay
	let @a = join(sort(split(eval('@a'), a:pat)), a:pat)
	normal! gv"ap
	let @a = l:save_reg
endfu
command! -range Sort call <SID>Sort(' ')
command! -range SortComma call <SID>Sort(', ')
command! -nargs=1 -range SortSep call <SID>Sort(<f-args>)

command! FontSizeGet call <SID>FontSizeGet()
command! FontSizeReset call <SID>FontSizeSet('')

" autocommand
command! AUTOiminsertzero let s:autoIminsertZero = !s:autoIminsertZero
let s:autoIminsertZero=0

command! AUTOhltrailingwhitespaces call <SID>ToggleAutoHlTrailingWhiteSpaces()
let s:autoHlTrailingWhiteSpaces = 1
fu! s:ToggleAutoHlTrailingWhiteSpaces()
	let s:autoHlTrailingWhiteSpaces = !s:autoHlTrailingWhiteSpaces
	call <SID>HlTrailingWhiteSpace(1)
endfu
fu! s:HlTrailingWhiteSpace(isNormal)
	silent! call matchdelete(4)
	if !s:autoHlTrailingWhiteSpaces | return | endif
	if !get(b:, 'autoHlTrailingWhiteSpaces', 1) | return | endif
	if a:isNormal
		call matchadd('TrailingWhiteSpace', '\\\@<!\s\+$', 10, 4)
	else
		call matchadd('TrailingWhiteSpace', '\\\@<!\s\+\%#\@<!$', 10, 4)
	endif
endfu

command! AUTOhlideographicspace call <SID>ToggleAutoHlIdeographicSpace()
let s:autoHlIdeographicSpace = 1
fu! s:ToggleAutoHlIdeographicSpace()
	let s:autoHlIdeographicSpace = !s:autoHlIdeographicSpace
	call <SID>HlIdeographicSpace()
endfu
fu! s:HlIdeographicSpace()
	silent! call matchdelete(5)
	if !s:autoHlIdeographicSpace | return | endif
	call matchadd('IdeographicSpace', '[\u3000]', 10, 5)
endfu

command! AUTOhalfcommas let s:autoHalfCommas = !s:autoHalfCommas
let s:autoHalfCommas = 0
fu! s:HalfCommas()
	if !s:autoHalfCommas | return | endif
	let l:curpos = getcurpos()
	silent! keeppatterns %s/，\+$/\=repeat(',', strchars(submatch(0)))/g
	silent! keeppatterns %s/．\+$/\=repeat('.', strchars(submatch(0)))/g
	silent! keeppatterns %s/，\+\ze /\=repeat(',', strchars(submatch(0)))/g
	silent! keeppatterns %s/．\+\ze /\=repeat('.', strchars(submatch(0)))/g
	silent! keeppatterns %s/，\+/\=repeat(',', strchars(submatch(0))) .. ' '/g
	silent! keeppatterns %s/．\+/\=repeat('.', strchars(submatch(0))) .. ' '/g
	call setpos('.', l:curpos)
endfu

command! AUTOconvertpunctuation let s:autoConvertPunctuation = !s:autoConvertPunctuation
let s:autoConvertPunctuation = 0
fu! s:ConvertPunctuation()
	if !s:autoConvertPunctuation | return | endif
	let l:curpos = getcurpos()
	silent! keeppatterns %s/．/。/g
	silent! keeppatterns %s/，/、/g
	silent! keeppatterns %s/\.\.\./…/g
	" ―
	call setpos('.', l:curpos)
endfu

fu! s:CopyToOther(str)
	call <SID>CopyToScreenReg(a:str)
	call <SID>CopyToClip_OSC52(a:str)
endfu
fu! s:CopyToOtherUnnamed()
	if v:event.regname ==# ''
		call <SID>CopyToOther(join(v:event.regcontents, "\n"))
	endif
endfu

let s:ignore_lastline = {'gitcommit': '', 'hgcommit': '', 'cvs': '', 'svn': ''}
fu! s:GoToLastLine()
	if line('''"') <= line('$') && !has_key(s:ignore_lastline, &ft)
		normal! g`"
	endif
endfu

aug vimrc
	au!
	au BufNewFile *.go,*.pl,*.py,*.sh call <SID>Template()
	au BufNewFile,BufRead * if &ft ==# 'asm' | set ft=gas | endif
	au BufNewFile,BufRead * if &ft ==# 'diff' | set ft=git | endif
	au BufNewFile,BufRead *.lalrpop set ft=rust
	au BufNewFile,BufRead */git/config,*.gitconfig set ft=gitconfig
	au BufNewFile,BufRead */yapf/style set ft=cfg
	au BufNewFile,BufRead .latexmkrc,latexmkrc set ft=perl
	au BufNewFile,BufRead .clang-format set ft=yaml
	au BufNewFile,BufRead dir_colors set ft=dircolors
	au BufReadPost * call <SID>GoToLastLine()
	au StdinReadPost * setl nomodified
	au FileType autohotkey setl commentstring=;%s
	au FileType c setl textwidth=80 cindent cinoptions=:0(s
	au FileType git setl vartabstop=9,8 | let b:autoHlTrailingWhiteSpaces = 0
	au FileType help nnoremap <buffer> <CR> <C-]>
	au FileType info nmap <buffer> gu <Plug>(InfoUp)
	au FileType info nmap <buffer> gn <Plug>(InfoNext)
	au FileType info nmap <buffer> gp <Plug>(InfoPrev)
	au FileType info nmap <buffer> gm <Plug>(InfoMenu)
	au FileType info nmap <buffer> gf <Plug>(InfoFollow)
	au FileType info nmap <buffer> go <Plug>(InfoGoto)
	au FileType java setl cindent cinoptions=(sJ1j1
	au FileType markdown setl tabstop=8
	au FileType php setl matchpairs-=<:>
	au FileType ps1 setl expandtab shiftwidth=2
	au FileType rust setl softtabstop=0 textwidth=100
	au FileType rust nnoremap <buffer> <Leader>t <Cmd>call <SID>Command({}, 1, 0, 0, ['cargo', 'test'])<CR>
	au FileType rust nnoremap <buffer> <Leader>u <Cmd>call <SID>Command({}, 1, 0, 0, ['cargo', 'run'])<CR>
	au FileType scheme setl expandtab shiftwidth=2 lispwords+=syntax-case,with-syntax
	au FileType scheme inoremap <buffer> <C-F> <C-O>==
	au FileType scheme nnoremap <buffer> <expr> = g:SchemeIndentExpr()
	au FileType scheme vnoremap <buffer> <expr> = g:SchemeIndentExpr()
	au FileType scheme nnoremap <buffer> == ==

	" au FileType tex nmap <silent><buffer><nowait> <LocalLeader>ls <plug>(vimtex-compile-ss)
	au BufWinEnter * call <SID>DisableALE()
	au CmdwinEnter * nnoremap <buffer> g<CR> :let g:CmdwinLastLine=line('.')<CR><CR>q::execute g:CmdwinLastLine<CR>
	au ColorScheme * hi Cursor guifg=fg guibg=Red
	au ColorScheme * hi CursorIM guifg=Black guibg=Blue
	au ColorScheme * hi TabLineFill guibg=#808080
	au ColorScheme * hi TrailingWhiteSpace ctermbg=darkred guibg=darkred
	au ColorScheme * hi IdeographicSpace term=underline ctermbg=DarkGreen guibg=DarkGreen
	au ColorScheme * call <SID>MultiHlSetup()
	au ColorScheme molokai hi Visual ctermfg=none
	au BufRead,InsertLeave * call <SID>HlTrailingWhiteSpace(1)
	au InsertEnter * call <SID>HlTrailingWhiteSpace(0)
	au BufRead * call <SID>HlIdeographicSpace()
	au TextYankPost * call <SID>CopyToOtherUnnamed()
	au BufWritePre *.tex call <SID>HalfCommas()
	au BufWritePre *.txt call <SID>ConvertPunctuation()
	au VimResume * call <SID>SetScreenTitle()
aug END

" previm
let g:previm_enable_realtime = 1
let g:loaded_previm = 1
command! -nargs=0 PrevimOpen unlet g:loaded_previm | runtime plugin/previm.vim | doautocmd Previm FileType | PrevimOpen
" vimtex
" if has('win32')
" 	let g:vimtex_view_general_viewer = 'SumatraPDF'
" 	let g:vimtex_view_general_options_latexmk = '-reuse-instance'
" 	let g:vimtex_view_general_options = '-reuse-instance -forward-search @tex @line @pdf'
" endif
" quickrun
nmap <Leader>r <Plug>(quickrun)
let g:quickrun_config = {
	\ 'python': {
	\   'command': s:pythonexe
	\ },
	\ 'rust': {
	\   'command': 'runner',
	\   'exec': '%c %s %o',
	\ },
	\ 'scheme': {
	\   'command': 'chezscheme',
	\   'exec': '%c --script %s',
	\ },
	\ '_': {
	\   'outputter/buffer/opener': 'botright new',
	\   'outputter/buffer/close_on_empty': 1,
	\   'runner': 'terminal',
	\ },
	\ }
if has('win32')
	let g:quickrun_config.scheme = {
		\ 'command': 'C:\Program Files\Racket\mzscheme.exe',
		\ 'exec': '%c %o -e ''(load "%s")'' %a',
		\ }
elseif has('osxdarwin')
	let g:quickrun_config.scheme.command = 'chez'
endif
" ale
nmap <Leader>j <Plug>(ale_next)
nmap <Leader>k <Plug>(ale_previous)
nmap <Leader>h <Plug>(ale_detail)

fu! s:ALEFixOnSaveToggle(vartype, value)
	let l:new = a:value ==# -1 ? '!' .. get(eval(a:vartype .. ':'), 'ale_fix_on_save', 0) : a:value
	execute 'let ' .. a:vartype .. ':ale_fix_on_save = ' .. l:new
endfu
command! -bar ALEFixOnSaveToggle        call <SID>ALEFixOnSaveToggle('g', -1)
command! -bar ALEFixOnSaveToggleBuffer  call <SID>ALEFixOnSaveToggle('b', -1)
command! -bar ALEFixOnSaveEnable        call <SID>ALEFixOnSaveToggle('g', 1)
command! -bar ALEFixOnSaveEnableBuffer  call <SID>ALEFixOnSaveToggle('b', 1)
command! -bar ALEFixOnSaveDisable       call <SID>ALEFixOnSaveToggle('g', 0)
command! -bar ALEFixOnSaveDisableBuffer call <SID>ALEFixOnSaveToggle('b', 0)
command! -bar ALEEnableAll        ALEEnable | ALEFixOnSaveEnable
command! -bar ALEEnableAllBuffer  ALEEnableBuffer | ALEFixOnSaveEnableBuffer
command! -bar ALEDisableAll       ALEDisable | ALEFixOnSaveDisable
command! -bar ALEDisableAllBuffer ALEDisableBuffer | ALEFixOnSaveDisableBuffer
command! -bar WriteNoFix          ALEFixOnSaveDisableBuffer | w

fu! s:DisableALE()
	if fnamemodify(bufname(), ':p') =~# '/linux/'
		ALEDisableAllBuffer
	endif
endfu

let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
	\ 'asciidoc': ['vale'],
	\ 'c'       : ['clangd'],
	\ 'cpp'     : ['clangd'],
	\ 'go'      : ['govet', 'gopls'],
	\ 'mail'    : ['vale'],
	\ 'markdown': ['vale'],
	\ 'ocaml'   : ['ocamllsp'],
	\ 'python'  : ['pylsp'],
	\ 'rst'     : ['vale'],
	\ 'rust'    : ['analyzer', 'cargo'],
	\ 'sh'      : [],
	\ 'tex'     : ['chktex'],
	\ }
let g:ale_fixers = {
	\ 'c'     : ['clang-format'],
	\ 'cpp'   : ['clang-format'],
	\ 'go'    : ['gofmt', 'goimports'],
	\ 'ocaml' : ['ocamlformat'],
	\ 'python': ['isort', 'yapf'],
	\ 'rust'  : ['rustfmt'],
	\ }
let g:ale_c_clangformat_style_option = '-n'
let g:ale_c_clangformat_use_local_file = 1
let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_hover_cursor = 0
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_virtualtext_cursor = 0
if has('win32unix')
	let g:ale_enabled = 0
endif
" vim-surround
let g:surround_dict = {
	\ 'mb': '（\r）', 'm(': '（ \r ）', 'm)': '（\r）',
	\ 'mB': '｛\r｝', 'm{': '｛ \r ｝', 'm}': '｛\r｝',
	\ 'ma': '＜\r＞', 'm<': '＜ \r ＞', 'm>': '＜\r＞',
	\ 'mA': '［\r］', 'm[': '［ \r ］', 'm]': '［\r］',
	\ 'mk': '「\r」',
	\ 'mn': '『\r』',
	\ 'ms': '【\r】',
	\ 'U' : 'https://\r/',
	\ }
" NERDTree
let g:NERDTreeMapActivateNode = 'e'
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
" openbrowser
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
nmap gX <Cmd>call openbrowser#search(expand('<cword>'), 'oald')<CR>
vmap gX <Cmd>call openbrowser#search(expand('<cword>'), 'oald')<CR>
let g:openbrowser_default_search = 'ddg'
let g:openbrowser_search_engines = {
	\ 'ddg' : 'https://duckduckgo.com/?q={query}',
	\ 'oald': 'https://www.oxfordlearnersdictionaries.com/search/english/?q={query}',
	\ }
" global
if filereadable('/usr/local/share/gtags/gtags.vim')
	source /usr/local/share/gtags/gtags.vim
elseif filereadable('/usr/share/vim/addons/plugin/gtags.vim')
	source /usr/share/vim/addons/plugin/gtags.vim
elseif filereadable('/usr/share/gtags/gtags.vim')
	source /usr/share/gtags/gtags.vim
endif
" rainbow vim-gas vim-lion emmet csv
let g:rainbow_active = 1
let g:gasCppComments = 1
let g:lion_squeeze_spaces = 1
let g:user_emmet_leader_key='<F7>'
let g:csv_default_delim=','

packloadall!
packadd matchit
silent! packadd termdebug
runtime ftplugin/man.vim
" vim-surround
let s:surround_textobj = {
	\ 'surround-mb': {'pattern': ['（', '）'], 'select-a': 'amb', 'select-i': 'imb'},
	\ 'surround-mB': {'pattern': ['｛', '｝'], 'select-a': 'amB', 'select-i': 'imB'},
	\ 'surround-ma': {'pattern': ['＜', '＞'], 'select-a': 'ama', 'select-i': 'ima'},
	\ 'surround-mA': {'pattern': ['［', '］'], 'select-a': 'amA', 'select-i': 'imA'},
	\ 'surround-mk': {'pattern': ['「', '」'], 'select-a': 'amk', 'select-i': 'imk'},
	\ 'surround-mn': {'pattern': ['『', '』'], 'select-a': 'amn', 'select-i': 'imn'},
	\ 'surround-ms': {'pattern': ['【', '】'], 'select-a': 'ams', 'select-i': 'ims'},
	\ }
silent! call textobj#user#plugin('surround', s:surround_textobj)
unlet s:surround_textobj

" gui
if has('gui_running') && has('win32')
	set guifont=Consolas:h11
	set lines=30 columns=86
	" let s:gvim_winpos_file = expand('~/.gvimwinpos')
	" fu! s:SaveGVimPos()
	" 	let l:pos = [getwinposx(), getwinposy()]
	" 	call writefile(l:pos, s:gvim_winpos_file)
	" endfu
	" aug vimrc
	" 	au VimLeavePre * call <SID>SaveGVimPos()
	" aug END
	" if filereadable(s:gvim_winpos_file)
	" 	let s:pos = readfile(s:gvim_winpos_file)
	" 	let s:n = str2nr(strpart(v:servername, 4))
	" 	execute 'winpos ' .. (s:pos[0] + 32 * s:n) .. ' ' .. (s:pos[1] + 32 * s:n)
	" 	unlet s:pos s:n
	" endif
	fu! g:Imzero()
		if s:autoIminsertZero
			set iminsert=0
		endif
		return ''
	endfu
	let s:guifont_default_size = split(split(&guifont, '[^\\]\zs,')[0], '[^\\]\zs:')[1][1:]
	fu! s:FontSizeSet(amount)
		let l:font = split(split(&guifont, '[^\\]\zs,')[0], '[^\\]\zs:')
		let l:size = l:font[1][1:]
		if a:amount ==# ""
			let l:size = s:guifont_default_size
		else
			let l:size = eval(l:size .. a:amount)
			if l:size == 0
				let l:size = 1
			endif
		endif
		let l:font[1] = l:font[1][0] .. l:size
		let &guifont = join(l:font, ':')
	endfu
	fu! s:CopyToClip_OSC52(str)
	endfu

	nnoremap <silent> <M-Space> <Cmd>simalt ~<CR>
	cnoremap <M-/> <C-\>e<SID>RegexRubout('\v[^/\\]*(/\|\\)? *$')<CR>
	cnoremap <M-w> <C-\>e<SID>RegexRubout('\v[^ ]* *$')<CR>
	nnoremap <M-m> <C-W>-
	nnoremap <M-p> <C-W>+
	nnoremap <silent> <M-=>               <Cmd>call <SID>FontSizeSet('')<CR>
	nnoremap <silent> <M-+>               <Cmd>call <SID>FontSizeSet('+1')<CR>
	nnoremap <silent> <M-->               <Cmd>call <SID>FontSizeSet('-1')<CR>
	nnoremap <silent> <C-=>               <Cmd>call <SID>FontSizeSet('')<CR>
	nnoremap <silent> <C-ScrollWheelUp>   <Cmd>call <SID>FontSizeSet('+1')<CR>
	nnoremap <silent> <C-ScrollWheelDown> <Cmd>call <SID>FontSizeSet('-1')<CR>
endif

if filereadable(expand('~/.localvimrc.vim'))
	source ~/.localvimrc.vim
endif
silent! colorscheme molokai
