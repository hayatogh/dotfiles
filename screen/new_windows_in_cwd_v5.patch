diff --git a/src/process.c b/src/process.c
index 470e70a..dc2ebb6 100644
--- a/src/process.c
+++ b/src/process.c
@@ -6572,6 +6572,10 @@ void DoScreen(char *fn, char **av)
 		case 'L':
 			nwin.Lflag = true;
 			break;
+		case 'C':
+			if (fore)
+				nwin.dir = GetPtsCwd(fore->w_ptyfd);
+			break;
 		default:
 			Msg(0, "%s: screen: invalid option -%c.", fn, av[0][1]);
 			break;
diff --git a/src/tty.c b/src/tty.c
index de5b8cd..b404983 100644
--- a/src/tty.c
+++ b/src/tty.c
@@ -40,6 +40,12 @@
 #include <sys/file.h>
 #include <sys/ioctl.h>
 #include <unistd.h>
+#if defined(__OpenBSD__)
+# include <sys/sysctl.h>
+#elif defined(__FreeBSD__)
+# include <sys/sysctl.h>
+# include <sys/user.h>
+#endif
 
 #include "screen.h"
 #include "fileio.h"
@@ -1258,3 +1264,52 @@ char *GetPtsPathOrSymlink(int fd)
 
 	return tty_name;
 }
+
+char *GetPtsCwd(int fd)
+{
+
+	pid_t pgrp;
+	if ((pgrp = tcgetpgrp(fd)) == -1)
+		return NULL;
+
+#if defined(__linux__) || defined(__NetBSD__)
+
+	static char cwd[MAXPATHLEN];
+	ssize_t len;
+	/* len(/proc/PID/cwd) where PID max 64 bit int*/
+	char proccwd[6 + 20 + 4 + 1];
+	sprintf(proccwd, "/proc/%d/cwd", (int)pgrp);
+
+	if ((len = readlink(proccwd, cwd, MAXPATHLEN)) == -1)
+		return NULL;
+	cwd[len] = '\0';
+	return cwd;
+
+#elif defined(__OpenBSD__)
+
+	static char cwd[MAXPATHLEN];
+	size_t len = MAXPATHLEN;
+	int mib[] = {CTL_KERN, KERN_PROC_CWD, 0};
+	mib[2] = (int)pgrp;
+
+	if (sysctl(mib, ARRAY_SIZE(mib), cwd, &len, NULL, 0) == -1)
+		return NULL;
+	return cwd;
+
+#elif defined(__FreeBSD__)
+
+	static struct kinfo_file kfile;
+	size_t len = sizeof(struct kinfo_file);
+	int mib[] = {CTL_KERN, KERN_PROC, KERN_PROC_CWD, 0};
+	mib[3] = (int)pgrp;
+
+	if (sysctl(mib, ARRAY_SIZE(mib), &kfile, &len, NULL, 0) == -1)
+		return NULL;
+	return kfile.kf_path;
+
+#else
+
+	return NULL;
+
+#endif
+}
diff --git a/src/tty.h b/src/tty.h
index d0eee3a..a78e94b 100644
--- a/src/tty.h
+++ b/src/tty.h
@@ -17,6 +17,7 @@ void  brktty (int);
 int fgtty(int fd);
 int   CheckTtyname (char *);
 char  *GetPtsPathOrSymlink (int);
+char *GetPtsCwd(int);
 
 /* global variables */
 
